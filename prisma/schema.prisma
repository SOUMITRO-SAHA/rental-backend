// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LOCAL")
}

enum AuthRoles {
  USER
  ADMIN
  MANAGER
  TENDER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id                   Int           @id @default(autoincrement())
  name                 String
  email                String        @unique
  password             String
  token                String?
  role                 AuthRoles     @default(USER)
  forgotPasswordToken  String?
  forgotPasswordExpiry DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  appointments         Appointment[]
  tickets              Ticket[]
  properties           Property[]
}

model Amenity {
  id              Int               @id @default(autoincrement())
  name            String
  icon            String            @default("")
  PropertyAmenity PropertyAmenity[]
}

model Property {
  id                 Int      @id @default(autoincrement())
  views              Int      @default(0)
  likes              Int      @default(0)
  userId             Int
  numberOfBedrooms   Int      @default(0)
  numberOfBathrooms  Int      @default(0)
  possession         String   @default("Immediate")
  hasBalcony         Boolean  @default(false)
  hasPowerBackup     Boolean  @default(false)
  propertyType       String   @default("Residential")
  isApartment        Boolean  @default(false)
  buildingAge        String   @default("New")
  floor              String   @default("Ground Floor")
  totalFloor         String   @default("1")
  buildupArea        Float    @default(0)
  buildingType       String   @default("Other")
  furnishingStatus   String   @default("Unfurnished")
  expectedRent       String   @default("Contact for rent")
  expectedDeposit    String   @default("Contact for deposit")
  rentNegotiable     Boolean  @default(true)
  maintenanceCharges Float    @default(0)
  availableDate      DateTime @default(now())
  gatedSecurity      Boolean  @default(false)
  ownershipType      String   @default("Freehold")
  flooring           String   @default("Other")
  hasParking         Boolean  @default(false)
  carpetArea         Float    @default(0)
  facing             String   @default("Other")
  description        String   @default("")
  address            String   @default("Unknown")
  streetAddress      String?
  city               String?
  state              String?
  postalCode         String?
  country            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship
  user      User              @relation(fields: [userId], references: [id])
  Photo     Photo[]           @relation("PropertyPhotos")
  amenities PropertyAmenity[]
}

// Junction table that connects properties to amenities in a many-to-many relationship
model PropertyAmenity {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  amenity    Amenity  @relation(fields: [amenityId], references: [id])
  amenityId  Int
}

model Photo {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation("PropertyPhotos", fields: [propertyId], references: [id])
  propertyId Int
}

model Appointment {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  description String?
}

model Ticket {
  id          Int          @id @default(autoincrement())
  userId      Int
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
}

model Banner {
  id       Int     @id @default(autoincrement())
  imageUrl String?
}

model Feedback {
  id           Int     @id @default(autoincrement())
  email        String?
  fullName     String?
  mobileNumber String?
  message      String?
}
